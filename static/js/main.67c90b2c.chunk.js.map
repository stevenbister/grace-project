{"version":3,"sources":["components/message.js","components/Counter.js","components/Emoji.js","components/RandomNumberButton.js","containers/Block.js","App.js","serviceWorker.js","index.js"],"names":["Container","styled","div","props","name","Name","span","Date","MessageText","p","Message","message","date","time","Paragraph","AnimatedSpan","animated","Counter","spring","useSpring","number","count","from","interpolate","Math","floor","item","defaultProps","P","Emoji","emoji","Button","button","propTypes","max","PropTypes","text","string","onClick","func","RandomNumberButton","random","Wrapper","section","colour","Block","children","App","state","error","isLoading","messages","handleRandomNumber","bind","fetch","then","response","json","data","setState","catch","this","fetchData","randomMessage","key","id","meta","Fragment","ref","parallax","pages","offset","speed","length","map","m","join","match","slice","React","Component","Boolean","window","location","hostname","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","console"],"mappings":"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","file":"static/js/main.67c90b2c.chunk.js","sourcesContent":["import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport styled from 'styled-components';\r\n\r\nconst Container = styled.div`\r\n  background: var(--message-colour);\r\n  border: solid var(--message-colour) red;\r\n  border-radius: 5px;\r\n  box-shadow: 2px 2px 2px #7f7979;\r\n  font-size: 14px;\r\n  padding: 5px 20px 5px 5px;\r\n  margin: 1rem 1rem;\r\n  line-height: 1.3;\r\n  word-wrap: anywhere;\r\n  ${props => props.name === 'Grace' ? 'margin-right: calc(1rem + 10px);' : 'margin-left: calc(1rem + 10px);' };\r\n`;\r\n\r\nconst Name = styled.span`\r\n  font-weight: 600;\r\n  padding-bottom: 5px;\r\n  display: block;\r\n`;\r\n\r\nconst Date = styled.span`\r\n  font-weight: 600;\r\n  text-align: right;\r\n  display: block;\r\n  color: #7f7979;\r\n  padding-top: 10px;\r\n`;\r\n\r\nconst MessageText = styled.p`\r\n  display: block;\r\n`;\r\n\r\nconst Message = (props) => {\r\n  const { name, message, date, time } = props;\r\n\r\n  return (\r\n    <Container name={name}>\r\n      <Name>{name}</Name>\r\n      <MessageText>{message}</MessageText>\r\n      <Date>{date} {time}</Date>\r\n    </Container>\r\n  )\r\n}\r\n\r\nMessage.propTypes = {\r\n  name: PropTypes.string,\r\n  message: PropTypes.string,\r\n  date: PropTypes.string,\r\n  time: PropTypes.string,\r\n}\r\n\r\nexport default Message;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport styled from 'styled-components';\r\nimport {useSpring, animated} from 'react-spring';\r\n\r\nconst Paragraph = styled.p`\r\n  margin: 0 1rem;\r\n`;\r\n\r\nconst AnimatedSpan = styled(animated.span)`\r\n  font-family: var(--heading-font);\r\n  font-size: 22vw;\r\n`\r\n\r\nconst Counter = (props) => {\r\n  const spring = useSpring({ number: props.count, from: { number: 0 } })\r\n\r\n  return <Paragraph><AnimatedSpan>{spring.number.interpolate(number => Math.floor(number))}</AnimatedSpan> {props.item}</Paragraph>\r\n}\r\n\r\nCounter.defaultProps = {\r\n  item: 'messages',\r\n}\r\n\r\nCounter.propTypes = {\r\n  count: PropTypes.number,\r\n  item: PropTypes.string\r\n}\r\n\r\nexport default Counter;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport styled from 'styled-components';\r\n\r\nconst P = styled.p`\r\n  margin: 0 1rem;\r\n`\r\n\r\nconst Emoji = (props) => <P>{props.emoji}</P>\r\n\r\nEmoji.propTypes = {\r\n  emoji: PropTypes.array\r\n}\r\n\r\nexport default Emoji;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport styled from 'styled-components';\r\n\r\nconst Button = styled.button`\r\n  grid-column: 2 / 3;\r\n  border: solid 2px #fff;\r\n  color: #fff;\r\n  background: transparent;\r\n  padding: 15px 10px;\r\n  margin: 0 1rem 20px;\r\n  font-size: 1.3rem;\r\n  box-shadow: 2px 2px 2px #7f7979;\r\n`;\r\n\r\nconst RandomNumberButton = (props) => {\r\n  // Let's generate a random number that won't go higher than the number of messages\r\n  const handleClick = () => props.onClick(Math.floor(Math.random() * props.max));\r\n\r\n  const { text } = props;\r\n\r\n  return <Button onClick={handleClick}>{text}</Button>;\r\n}\r\n\r\nButton.propTypes = {\r\n  max: PropTypes.number,\r\n  text: PropTypes.string,\r\n  onClick: PropTypes.func\r\n}\r\n\r\nexport default RandomNumberButton;\r\n","import React from 'react';\r\nimport {PropTypes, oneOfType} from 'prop-types';\r\nimport styled from 'styled-components';\r\n\r\nconst Wrapper = styled.section`\r\n  background: var(--${props => props.colour});\r\n  min-height: 100vh;\r\n  display: flex;\r\n  flex-flow: column;\r\n  justify-content: center;\r\n  padding: 2rem 0;\r\n  scroll-snap-align: start;\r\n  position: relative;\r\n`;\r\n\r\nconst Block = props => {\r\n  return <Wrapper colour={props.colour}>{props.children}</Wrapper>;\r\n\r\n};\r\n\r\nBlock.propTypes = {\r\n  colour: PropTypes.string,\r\n  children: oneOfType([\r\n    PropTypes.array,\r\n    PropTypes.object,\r\n    PropTypes.element\r\n  ])\r\n}\r\n\r\nexport default Block;\r\n","import React from 'react';\r\nimport {Parallax, ParallaxLayer} from 'react-spring/renderprops-addons'\r\nimport Message from './components/message';\r\nimport Counter from './components/Counter';\r\nimport Emoji from './components/Emoji'\r\nimport RandomNumberButton from './components/RandomNumberButton';\r\nimport Block from './containers/Block';\r\nimport './App.css';\r\n\r\nexport default class App extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      error: null,\r\n      isLoading: true,\r\n      messages: [],\r\n      number: '',\r\n    }\r\n\r\n    this.handleRandomNumber = this.handleRandomNumber.bind(this);\r\n  }\r\n\r\n  fetchData() {\r\n    fetch('https://raw.githubusercontent.com/stevenbister/grace-project/master/backend/whatsapp-chat.json')\r\n      .then(response => response.json())\r\n      .then(\r\n        data =>\r\n          this.setState({\r\n            messages: data,\r\n            isLoading: false,\r\n          })\r\n      )\r\n      .catch(error => this.setState({ error, isLoading: false }));\r\n  }\r\n\r\n  handleRandomNumber(number) {\r\n    this.setState({number})\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.fetchData();\r\n  }\r\n\r\n  render() {\r\n    const { messages, number, isLoading } = this.state;\r\n    let randomMessage;\r\n\r\n    // If number is set generate random message\r\n    if (number) {\r\n      randomMessage = <Message\r\n        key={messages[number].id}\r\n        name={messages[number].meta.name} \r\n        message={messages[number].message} \r\n        date={messages[number].meta.date} \r\n        time={messages[number].meta.time} \r\n      />\r\n    }\r\n\r\n    if (isLoading === false) {\r\n      return (\r\n        <React.Fragment>\r\n          <Parallax ref={ref => (this.parallax = ref)} pages={5} >\r\n              <Block colour=\"purple\">\r\n                <ParallaxLayer offset={0.5} speed={0.5}>\r\n                    <Counter count={messages.length} />\r\n                </ParallaxLayer>\r\n              </Block>\r\n\r\n            <Block colour=\"peach\">\r\n              <ParallaxLayer offset={0.5} speed={0.5}>\r\n                <Counter count={messages.map(m => m.message).join(',').match(/❤️/gi).length} item={`❤️'s`} />\r\n\r\n                <Emoji emoji={messages.map(m => m.message).join(',').match(/❤️/gi)} />\r\n              </ParallaxLayer>\r\n            </Block>\r\n\r\n            <Block colour=\"green\">\r\n              <ParallaxLayer offset={1} speed={0.75}>\r\n                {/* Let's get the first X messages */}\r\n                {messages.slice(0, 2).map(m => {\r\n                  const { id, message } = m\r\n                  const { name, date, time } = m.meta\r\n\r\n                  return <Message \r\n                    key={id}\r\n                    name={name} \r\n                    message={message} \r\n                    date={date} \r\n                    time={time}\r\n                  />\r\n                })}\r\n              </ParallaxLayer>\r\n            </Block>\r\n\r\n\r\n            <Block colour=\"peach\">\r\n              <ParallaxLayer offset={1.5} speed={0.5}>\r\n                <Counter count={messages.map(m => m.message).join(',').match(/love you/gi).length} item={`love you's`} />\r\n              </ParallaxLayer>\r\n            </Block>\r\n\r\n            <Block colour=\"blue\">\r\n              <ParallaxLayer offset={1.7} speed={0.5}>\r\n                <RandomNumberButton text={'Generate a random message'} max={messages.length} onClick={this.handleRandomNumber}/>\r\n              {randomMessage}\r\n              </ParallaxLayer>\r\n            </Block>\r\n          </Parallax>\r\n        </React.Fragment>\r\n      );\r\n    }\r\n\r\n    return <p>Loading...</p>\r\n  }  \r\n}\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <App />,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}